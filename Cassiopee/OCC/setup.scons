import os
import KCore.Dist as Dist
from KCore.config import *

#==============================================================================
# OCC requires:
# ELSAPROD variable defined in environment
# C++ compiler
# KCore library
# Numpy
# Generator library
#==============================================================================

# Get prefix from command line
prefix = ARGUMENTS.get('prefix', '')
installPath = Dist.getInstallPath(prefix)

# Get compilers from Distutils ================================================
(cc, cxx, opt, basecflags, ccshared, ldshared, so_ext) = Dist.getDistUtilsCompilers()

# Python ======================================================================
(pythonVersion, pythonIncDir, pythonLibDir, pythonLibs) = Dist.checkPython()

# Test if numpy exists =======================================================
(numpyVersion, numpyIncDir, numpyLibDir) = Dist.checkNumpy()

# Test if kcore exists ========================================================
(kcoreVersion, kcoreIncDir, kcoreLibDir) = Dist.checkKCore()

# Test if generator exists ====================================================
(generatorVersion, generatorIncDir, generatorLibDir) = Dist.checkGenerator()

# Test if open-cascade is installed ===========================================
(OCCPresent, OCCIncDir, OCCLibDir) = Dist.checkOCC(additionalLibPaths, 
                                                   additionalIncludePaths)

if not OCCPresent:
    # Utilise la version installee dans OCC (non fonctionnel)
    # Hack: To make a full path name for the OCC include dir (the relative path to build/... doesn't contain everything, e.g fff is not copied
    #import KCore.installPath
    #OCCIncDir = KCore.installPath.includePath
    #OCCIncDir = os.path.dirname(OCCIncDir)
    #OCCIncDir = os.path.join(OCCIncDir, 'OCC/OCC/occ_inc')
    print("Warning: open cascade not found on your system. OCC not installed.")
    os._exit(0) # do not end compilation

# Setting libraryDirs and libraries ===========================================
libraryDirs = ['..', '.', pythonLibDir, kcoreLibDir, generatorLibDir]
includeDirs = [OCCIncDir, generatorIncDir, pythonIncDir, numpyIncDir, kcoreIncDir]
libraries = ["generator", "kcore"]
(ok, libs, paths) = Dist.checkCppLibs([], additionalLibPaths)
libraryDirs += paths; libraries += libs

# Env =========================================================================
import srcs
if Dist.getSystem()[0] == 'mingw': tools = ['mingw']
else: tools = None
AR = Dist.getAR()
env = Environment(tools=tools, CC=cc, CXX=cxx, AR=AR, CPPFLAGS=[],
                  LIBPATH=additionalLibPaths+libraryDirs,
                  LIBS=libraries+additionalLibs,
                  CPPPATH=["OCC"]+additionalIncludePaths+includeDirs,
                  SHLIBSUFFIX=so_ext, SHLIBPREFIX='',
                  LINKFLAGS=Dist.getLinkArgs(),
                  ENV=Dist.getEnvForScons())
if Dist.getSystem()[0] == 'mingw':
	env.Replace(CXXFLAGS=Dist.getCppArgs()+['-DWNT', '-fpermissive', '-D_USE_MATH_DEFINES', '-D_finite=finitef', '-Dfinite=finitef'])
else:
	env.Replace(CXXFLAGS=Dist.getCppArgs())

env.Replace(CFLAGS=Dist.getCArgs())

ELSAPROD = os.environ.get('ELSAPROD', 'x86_r8')
env.SConsignFile('build/'+ELSAPROD+'/.sconsign.dblite')

#==============================================================================
occ_cassiopee = env.StaticLibrary('occ_cassiopee', srcs.srcs)
modDir = 'build/'+ELSAPROD
allLibs = []; allDeps = []
for m in srcs.allMods:
    f = srcs.mod_srcs[m]
    lib = env.StaticLibrary(m, f)
    allLibs.append(lib)
    allDeps.append(env.Install(modDir, lib))

dp0 = env.Install(modDir, occ_cassiopee)

if OCCPresent:
    env.Alias(target="install", source=[dp0])
else:
    env.Alias(target="install", source=[dp0]+allDeps)
